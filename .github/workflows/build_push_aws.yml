name: Build and Push Docker Image to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ github.event.repository.name }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      IMAGE_TAG: latest
      SSH_PRIVATE_KEY: ${{secrets.AMAZON_PEM}}
      AWS_EC2_IP: ec2-3-112-191-215

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    # Create a new builder that supports cache export/import
    - name: Create a new builder
      run: docker buildx create --name mybuilder --use
    # Cache setup
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{secrets.AWS_REGION}}
        role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/github_action
        
    - name: Log in to Amazon ECR and create repository if not exist
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Create ECR repository if it doesn't exist
      run: |
        if ! aws ecr describe-repositories --repository-names ${{env.REPO_NAME}} --region ${{secrets.AWS_REGION}}; then
          aws ecr create-repository --repository-name ${{env.REPO_NAME}} --region ${{secrets.AWS_REGION}}
        fi

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}} 
      run: |
        docker buildx build \
          --build-arg OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}} \
          --build-arg GTB_ACCESS_TOKEN=${{secrets.GTB_ACCESS_TOKEN}} \
          --build-arg AWS_REGION=${{secrets.AWS_REGION}} \
          --build-arg AMAZON_ACCESS_KEY=${{secrets.AMAZON_ACCESS_KEY}} \
          --build-arg AMAZON_SECRET_ACCESS_KEY=${{secrets.AMAZON_SECRET_ACCESS_KEY}} \
          -t $ECR_REGISTRY/${{env.REPO_NAME}}:$IMAGE_TAG \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new \
          --push \
          .  
    # Updating cache
    - name: Update cache
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache-new
        key: ${{ runner.os }}-buildx-${{ github.sha }}
    
    - name: Copy CloudFormation file to EC2
      run: |
        echo "${{env.SSH_PRIVATE_KEY}}" > ssh_key
        chmod 600 ssh_key
        scp -i ssh_key -o StrictHostKeyChecking=no -r ./cloudformation/ ec2-user@${{env.AWS_EC2_IP}}.${{env.AWS_REGION}}.compute.amazonaws.com:~

    
    # Outputs
    outputs:
      ecr_uri: ${{steps.login-ecr.outputs.registry}}/${{env.REPO_NAME}} 


  deploy:
    needs: build-and-push  # This job runs after build-and-push job
    runs-on: ubuntu-latest
    strategy:
      matrix:         ################################################################TO SET#######################################################################
                      #######################################################################################################################################
        task_family: ['nbbo', 'binance', 'bitfinex'] 

    env:
      REPO_NAME: ${{github.event.repository.name}}
      AWS_REGION: ${{secrets.AWS_REGION}}
      ECS_CLUSTER: ultima
      IMAGE_TAG: latest
      TASK_FAMILY: ${{matrix.task_family}}
      ECR_URI: ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.ap-northeast-1.amazonaws.com/${{github.event.repository.name}} #${{needs.build-and-push.outputs.ecr_uri}} #is without:latest because is setted in the cloud formation file (check)

    steps:
      # ... [steps specific to deployment]
    - name: Checkout Repository
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{secrets.AWS_REGION}}
        role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/github_action

    - name: Deploy CloudFormation Stack Without AWS Roles 
      run: |
        # aws cloudformation delete-stack --stack-name test-${{env.TASK_FAMILY}}
        aws cloudformation deploy \
          --template-file "./cloudformation/ecs_cloudformation_withroles.yaml" \
          --stack-name test-${{env.TASK_FAMILY}} \
          --parameter-overrides \
          ECRRepositoryURI=${{env.ECR_URI}} \
          ECSTaskFamily=${{env.TASK_FAMILY}} \
          ECSCluster=${{env.ECS_CLUSTER}} \
          ECSExecutionRole=arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/ecsTaskExecutionRole \
          ECSTaskRole=arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/ecsTaskRole 
          

    - name: Ensure CloudWatch Log Group and Stream Exist
      run: |
        aws logs create-log-group --log-group-name CloudFormation || true
        aws logs create-log-stream --log-group-name CloudFormation --log-stream-name test_${{env.TASK_FAMILY}} || true

    - name: Describe CloudFormation Stack and Send to CloudWatch
      run: |
        # Describe the stack
        STACK_INFO=$(aws cloudformation describe-stacks --stack-name test-${{env.TASK_FAMILY}} --query 'Stacks[0].Outputs' --output text)

        # Send the output to CloudWatch
        aws logs put-log-events \
        --log-group-name CloudFormation \
        --log-stream-name test-${{env.TASK_FAMILY}} \
        --log-events timestamp=$(date +%s%3N),message="$STACK_INFO"

    # - name: Delete CloudFormation Stack
    #   run: |
    #     aws cloudformation delete-stack --stack-name test-${{env.TASK_FAMILY}}









